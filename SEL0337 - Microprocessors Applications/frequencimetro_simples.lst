                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (MINGW32)
                              4 ; This file was generated Mon Nov 17 12:03:12 2014
                              5 ;--------------------------------------------------------
                              6 	.module frequencimetro_simples
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _estourot1
                             14 	.globl _imprimeFrase4bits
                             15 	.globl _imprimeChar4bits
                             16 	.globl _imprimeFrase
                             17 	.globl _imprimeChar
                             18 	.globl _atraso
                             19 	.globl _CY
                             20 	.globl _AC
                             21 	.globl _F0
                             22 	.globl _RS1
                             23 	.globl _RS0
                             24 	.globl _OV
                             25 	.globl _FL
                             26 	.globl _P
                             27 	.globl _TF2
                             28 	.globl _EXF2
                             29 	.globl _RCLK
                             30 	.globl _TCLK
                             31 	.globl _EXEN2
                             32 	.globl _TR2
                             33 	.globl _C_T2
                             34 	.globl _CP_RL2
                             35 	.globl _T2CON_7
                             36 	.globl _T2CON_6
                             37 	.globl _T2CON_5
                             38 	.globl _T2CON_4
                             39 	.globl _T2CON_3
                             40 	.globl _T2CON_2
                             41 	.globl _T2CON_1
                             42 	.globl _T2CON_0
                             43 	.globl _PT2
                             44 	.globl _PS
                             45 	.globl _PT1
                             46 	.globl _PX1
                             47 	.globl _PT0
                             48 	.globl _PX0
                             49 	.globl _RD
                             50 	.globl _WR
                             51 	.globl _T1
                             52 	.globl _T0
                             53 	.globl _INT1
                             54 	.globl _INT0
                             55 	.globl _TXD
                             56 	.globl _RXD
                             57 	.globl _P3_7
                             58 	.globl _P3_6
                             59 	.globl _P3_5
                             60 	.globl _P3_4
                             61 	.globl _P3_3
                             62 	.globl _P3_2
                             63 	.globl _P3_1
                             64 	.globl _P3_0
                             65 	.globl _EA
                             66 	.globl _ET2
                             67 	.globl _ES
                             68 	.globl _ET1
                             69 	.globl _EX1
                             70 	.globl _ET0
                             71 	.globl _EX0
                             72 	.globl _P2_7
                             73 	.globl _P2_6
                             74 	.globl _P2_5
                             75 	.globl _P2_4
                             76 	.globl _P2_3
                             77 	.globl _P2_2
                             78 	.globl _P2_1
                             79 	.globl _P2_0
                             80 	.globl _SM0
                             81 	.globl _SM1
                             82 	.globl _SM2
                             83 	.globl _REN
                             84 	.globl _TB8
                             85 	.globl _RB8
                             86 	.globl _TI
                             87 	.globl _RI
                             88 	.globl _T2EX
                             89 	.globl _T2
                             90 	.globl _P1_7
                             91 	.globl _P1_6
                             92 	.globl _P1_5
                             93 	.globl _P1_4
                             94 	.globl _P1_3
                             95 	.globl _P1_2
                             96 	.globl _P1_1
                             97 	.globl _P1_0
                             98 	.globl _TF1
                             99 	.globl _TR1
                            100 	.globl _TF0
                            101 	.globl _TR0
                            102 	.globl _IE1
                            103 	.globl _IT1
                            104 	.globl _IE0
                            105 	.globl _IT0
                            106 	.globl _P0_7
                            107 	.globl _P0_6
                            108 	.globl _P0_5
                            109 	.globl _P0_4
                            110 	.globl _P0_3
                            111 	.globl _P0_2
                            112 	.globl _P0_1
                            113 	.globl _P0_0
                            114 	.globl _B
                            115 	.globl _A
                            116 	.globl _ACC
                            117 	.globl _PSW
                            118 	.globl _TH2
                            119 	.globl _TL2
                            120 	.globl _RCAP2H
                            121 	.globl _RCAP2L
                            122 	.globl _T2MOD
                            123 	.globl _T2CON
                            124 	.globl _IP
                            125 	.globl _P3
                            126 	.globl _IE
                            127 	.globl _P2
                            128 	.globl _SBUF
                            129 	.globl _SCON
                            130 	.globl _P1
                            131 	.globl _TH1
                            132 	.globl _TH0
                            133 	.globl _TL1
                            134 	.globl _TL0
                            135 	.globl _TMOD
                            136 	.globl _TCON
                            137 	.globl _PCON
                            138 	.globl _DPH
                            139 	.globl _DPL
                            140 	.globl _SP
                            141 	.globl _P0
                            142 	.globl _pow_PARM_2
                            143 	.globl _ascii
                            144 	.globl _estouros
                            145 	.globl _ndigitos
                            146 	.globl _posicionaCursor4bits_PARM_2
                            147 	.globl _posicionaCursor_PARM_2
                            148 	.globl _divideMsg
                            149 	.globl _imprimeInst
                            150 	.globl _initLCD
                            151 	.globl _posicionaCursor
                            152 	.globl _imprimeInst4bits
                            153 	.globl _initLCD4bits
                            154 	.globl _posicionaCursor4bits
                            155 	.globl _pow
                            156 	.globl _asciiNum
                            157 ;--------------------------------------------------------
                            158 ; special function registers
                            159 ;--------------------------------------------------------
                            160 	.area RSEG    (ABS,DATA)
   0000                     161 	.org 0x0000
                     0080   162 G$P0$0$0 == 0x0080
                     0080   163 _P0	=	0x0080
                     0081   164 G$SP$0$0 == 0x0081
                     0081   165 _SP	=	0x0081
                     0082   166 G$DPL$0$0 == 0x0082
                     0082   167 _DPL	=	0x0082
                     0083   168 G$DPH$0$0 == 0x0083
                     0083   169 _DPH	=	0x0083
                     0087   170 G$PCON$0$0 == 0x0087
                     0087   171 _PCON	=	0x0087
                     0088   172 G$TCON$0$0 == 0x0088
                     0088   173 _TCON	=	0x0088
                     0089   174 G$TMOD$0$0 == 0x0089
                     0089   175 _TMOD	=	0x0089
                     008A   176 G$TL0$0$0 == 0x008a
                     008A   177 _TL0	=	0x008a
                     008B   178 G$TL1$0$0 == 0x008b
                     008B   179 _TL1	=	0x008b
                     008C   180 G$TH0$0$0 == 0x008c
                     008C   181 _TH0	=	0x008c
                     008D   182 G$TH1$0$0 == 0x008d
                     008D   183 _TH1	=	0x008d
                     0090   184 G$P1$0$0 == 0x0090
                     0090   185 _P1	=	0x0090
                     0098   186 G$SCON$0$0 == 0x0098
                     0098   187 _SCON	=	0x0098
                     0099   188 G$SBUF$0$0 == 0x0099
                     0099   189 _SBUF	=	0x0099
                     00A0   190 G$P2$0$0 == 0x00a0
                     00A0   191 _P2	=	0x00a0
                     00A8   192 G$IE$0$0 == 0x00a8
                     00A8   193 _IE	=	0x00a8
                     00B0   194 G$P3$0$0 == 0x00b0
                     00B0   195 _P3	=	0x00b0
                     00B8   196 G$IP$0$0 == 0x00b8
                     00B8   197 _IP	=	0x00b8
                     00C8   198 G$T2CON$0$0 == 0x00c8
                     00C8   199 _T2CON	=	0x00c8
                     00C9   200 G$T2MOD$0$0 == 0x00c9
                     00C9   201 _T2MOD	=	0x00c9
                     00CA   202 G$RCAP2L$0$0 == 0x00ca
                     00CA   203 _RCAP2L	=	0x00ca
                     00CB   204 G$RCAP2H$0$0 == 0x00cb
                     00CB   205 _RCAP2H	=	0x00cb
                     00CC   206 G$TL2$0$0 == 0x00cc
                     00CC   207 _TL2	=	0x00cc
                     00CD   208 G$TH2$0$0 == 0x00cd
                     00CD   209 _TH2	=	0x00cd
                     00D0   210 G$PSW$0$0 == 0x00d0
                     00D0   211 _PSW	=	0x00d0
                     00E0   212 G$ACC$0$0 == 0x00e0
                     00E0   213 _ACC	=	0x00e0
                     00E0   214 G$A$0$0 == 0x00e0
                     00E0   215 _A	=	0x00e0
                     00F0   216 G$B$0$0 == 0x00f0
                     00F0   217 _B	=	0x00f0
                            218 ;--------------------------------------------------------
                            219 ; special function bits
                            220 ;--------------------------------------------------------
                            221 	.area RSEG    (ABS,DATA)
   0000                     222 	.org 0x0000
                     0080   223 G$P0_0$0$0 == 0x0080
                     0080   224 _P0_0	=	0x0080
                     0081   225 G$P0_1$0$0 == 0x0081
                     0081   226 _P0_1	=	0x0081
                     0082   227 G$P0_2$0$0 == 0x0082
                     0082   228 _P0_2	=	0x0082
                     0083   229 G$P0_3$0$0 == 0x0083
                     0083   230 _P0_3	=	0x0083
                     0084   231 G$P0_4$0$0 == 0x0084
                     0084   232 _P0_4	=	0x0084
                     0085   233 G$P0_5$0$0 == 0x0085
                     0085   234 _P0_5	=	0x0085
                     0086   235 G$P0_6$0$0 == 0x0086
                     0086   236 _P0_6	=	0x0086
                     0087   237 G$P0_7$0$0 == 0x0087
                     0087   238 _P0_7	=	0x0087
                     0088   239 G$IT0$0$0 == 0x0088
                     0088   240 _IT0	=	0x0088
                     0089   241 G$IE0$0$0 == 0x0089
                     0089   242 _IE0	=	0x0089
                     008A   243 G$IT1$0$0 == 0x008a
                     008A   244 _IT1	=	0x008a
                     008B   245 G$IE1$0$0 == 0x008b
                     008B   246 _IE1	=	0x008b
                     008C   247 G$TR0$0$0 == 0x008c
                     008C   248 _TR0	=	0x008c
                     008D   249 G$TF0$0$0 == 0x008d
                     008D   250 _TF0	=	0x008d
                     008E   251 G$TR1$0$0 == 0x008e
                     008E   252 _TR1	=	0x008e
                     008F   253 G$TF1$0$0 == 0x008f
                     008F   254 _TF1	=	0x008f
                     0090   255 G$P1_0$0$0 == 0x0090
                     0090   256 _P1_0	=	0x0090
                     0091   257 G$P1_1$0$0 == 0x0091
                     0091   258 _P1_1	=	0x0091
                     0092   259 G$P1_2$0$0 == 0x0092
                     0092   260 _P1_2	=	0x0092
                     0093   261 G$P1_3$0$0 == 0x0093
                     0093   262 _P1_3	=	0x0093
                     0094   263 G$P1_4$0$0 == 0x0094
                     0094   264 _P1_4	=	0x0094
                     0095   265 G$P1_5$0$0 == 0x0095
                     0095   266 _P1_5	=	0x0095
                     0096   267 G$P1_6$0$0 == 0x0096
                     0096   268 _P1_6	=	0x0096
                     0097   269 G$P1_7$0$0 == 0x0097
                     0097   270 _P1_7	=	0x0097
                     0090   271 G$T2$0$0 == 0x0090
                     0090   272 _T2	=	0x0090
                     0091   273 G$T2EX$0$0 == 0x0091
                     0091   274 _T2EX	=	0x0091
                     0098   275 G$RI$0$0 == 0x0098
                     0098   276 _RI	=	0x0098
                     0099   277 G$TI$0$0 == 0x0099
                     0099   278 _TI	=	0x0099
                     009A   279 G$RB8$0$0 == 0x009a
                     009A   280 _RB8	=	0x009a
                     009B   281 G$TB8$0$0 == 0x009b
                     009B   282 _TB8	=	0x009b
                     009C   283 G$REN$0$0 == 0x009c
                     009C   284 _REN	=	0x009c
                     009D   285 G$SM2$0$0 == 0x009d
                     009D   286 _SM2	=	0x009d
                     009E   287 G$SM1$0$0 == 0x009e
                     009E   288 _SM1	=	0x009e
                     009F   289 G$SM0$0$0 == 0x009f
                     009F   290 _SM0	=	0x009f
                     00A0   291 G$P2_0$0$0 == 0x00a0
                     00A0   292 _P2_0	=	0x00a0
                     00A1   293 G$P2_1$0$0 == 0x00a1
                     00A1   294 _P2_1	=	0x00a1
                     00A2   295 G$P2_2$0$0 == 0x00a2
                     00A2   296 _P2_2	=	0x00a2
                     00A3   297 G$P2_3$0$0 == 0x00a3
                     00A3   298 _P2_3	=	0x00a3
                     00A4   299 G$P2_4$0$0 == 0x00a4
                     00A4   300 _P2_4	=	0x00a4
                     00A5   301 G$P2_5$0$0 == 0x00a5
                     00A5   302 _P2_5	=	0x00a5
                     00A6   303 G$P2_6$0$0 == 0x00a6
                     00A6   304 _P2_6	=	0x00a6
                     00A7   305 G$P2_7$0$0 == 0x00a7
                     00A7   306 _P2_7	=	0x00a7
                     00A8   307 G$EX0$0$0 == 0x00a8
                     00A8   308 _EX0	=	0x00a8
                     00A9   309 G$ET0$0$0 == 0x00a9
                     00A9   310 _ET0	=	0x00a9
                     00AA   311 G$EX1$0$0 == 0x00aa
                     00AA   312 _EX1	=	0x00aa
                     00AB   313 G$ET1$0$0 == 0x00ab
                     00AB   314 _ET1	=	0x00ab
                     00AC   315 G$ES$0$0 == 0x00ac
                     00AC   316 _ES	=	0x00ac
                     00AD   317 G$ET2$0$0 == 0x00ad
                     00AD   318 _ET2	=	0x00ad
                     00AF   319 G$EA$0$0 == 0x00af
                     00AF   320 _EA	=	0x00af
                     00B0   321 G$P3_0$0$0 == 0x00b0
                     00B0   322 _P3_0	=	0x00b0
                     00B1   323 G$P3_1$0$0 == 0x00b1
                     00B1   324 _P3_1	=	0x00b1
                     00B2   325 G$P3_2$0$0 == 0x00b2
                     00B2   326 _P3_2	=	0x00b2
                     00B3   327 G$P3_3$0$0 == 0x00b3
                     00B3   328 _P3_3	=	0x00b3
                     00B4   329 G$P3_4$0$0 == 0x00b4
                     00B4   330 _P3_4	=	0x00b4
                     00B5   331 G$P3_5$0$0 == 0x00b5
                     00B5   332 _P3_5	=	0x00b5
                     00B6   333 G$P3_6$0$0 == 0x00b6
                     00B6   334 _P3_6	=	0x00b6
                     00B7   335 G$P3_7$0$0 == 0x00b7
                     00B7   336 _P3_7	=	0x00b7
                     00B0   337 G$RXD$0$0 == 0x00b0
                     00B0   338 _RXD	=	0x00b0
                     00B1   339 G$TXD$0$0 == 0x00b1
                     00B1   340 _TXD	=	0x00b1
                     00B2   341 G$INT0$0$0 == 0x00b2
                     00B2   342 _INT0	=	0x00b2
                     00B3   343 G$INT1$0$0 == 0x00b3
                     00B3   344 _INT1	=	0x00b3
                     00B4   345 G$T0$0$0 == 0x00b4
                     00B4   346 _T0	=	0x00b4
                     00B5   347 G$T1$0$0 == 0x00b5
                     00B5   348 _T1	=	0x00b5
                     00B6   349 G$WR$0$0 == 0x00b6
                     00B6   350 _WR	=	0x00b6
                     00B7   351 G$RD$0$0 == 0x00b7
                     00B7   352 _RD	=	0x00b7
                     00B8   353 G$PX0$0$0 == 0x00b8
                     00B8   354 _PX0	=	0x00b8
                     00B9   355 G$PT0$0$0 == 0x00b9
                     00B9   356 _PT0	=	0x00b9
                     00BA   357 G$PX1$0$0 == 0x00ba
                     00BA   358 _PX1	=	0x00ba
                     00BB   359 G$PT1$0$0 == 0x00bb
                     00BB   360 _PT1	=	0x00bb
                     00BC   361 G$PS$0$0 == 0x00bc
                     00BC   362 _PS	=	0x00bc
                     00BD   363 G$PT2$0$0 == 0x00bd
                     00BD   364 _PT2	=	0x00bd
                     00C8   365 G$T2CON_0$0$0 == 0x00c8
                     00C8   366 _T2CON_0	=	0x00c8
                     00C9   367 G$T2CON_1$0$0 == 0x00c9
                     00C9   368 _T2CON_1	=	0x00c9
                     00CA   369 G$T2CON_2$0$0 == 0x00ca
                     00CA   370 _T2CON_2	=	0x00ca
                     00CB   371 G$T2CON_3$0$0 == 0x00cb
                     00CB   372 _T2CON_3	=	0x00cb
                     00CC   373 G$T2CON_4$0$0 == 0x00cc
                     00CC   374 _T2CON_4	=	0x00cc
                     00CD   375 G$T2CON_5$0$0 == 0x00cd
                     00CD   376 _T2CON_5	=	0x00cd
                     00CE   377 G$T2CON_6$0$0 == 0x00ce
                     00CE   378 _T2CON_6	=	0x00ce
                     00CF   379 G$T2CON_7$0$0 == 0x00cf
                     00CF   380 _T2CON_7	=	0x00cf
                     00C8   381 G$CP_RL2$0$0 == 0x00c8
                     00C8   382 _CP_RL2	=	0x00c8
                     00C9   383 G$C_T2$0$0 == 0x00c9
                     00C9   384 _C_T2	=	0x00c9
                     00CA   385 G$TR2$0$0 == 0x00ca
                     00CA   386 _TR2	=	0x00ca
                     00CB   387 G$EXEN2$0$0 == 0x00cb
                     00CB   388 _EXEN2	=	0x00cb
                     00CC   389 G$TCLK$0$0 == 0x00cc
                     00CC   390 _TCLK	=	0x00cc
                     00CD   391 G$RCLK$0$0 == 0x00cd
                     00CD   392 _RCLK	=	0x00cd
                     00CE   393 G$EXF2$0$0 == 0x00ce
                     00CE   394 _EXF2	=	0x00ce
                     00CF   395 G$TF2$0$0 == 0x00cf
                     00CF   396 _TF2	=	0x00cf
                     00D0   397 G$P$0$0 == 0x00d0
                     00D0   398 _P	=	0x00d0
                     00D1   399 G$FL$0$0 == 0x00d1
                     00D1   400 _FL	=	0x00d1
                     00D2   401 G$OV$0$0 == 0x00d2
                     00D2   402 _OV	=	0x00d2
                     00D3   403 G$RS0$0$0 == 0x00d3
                     00D3   404 _RS0	=	0x00d3
                     00D4   405 G$RS1$0$0 == 0x00d4
                     00D4   406 _RS1	=	0x00d4
                     00D5   407 G$F0$0$0 == 0x00d5
                     00D5   408 _F0	=	0x00d5
                     00D6   409 G$AC$0$0 == 0x00d6
                     00D6   410 _AC	=	0x00d6
                     00D7   411 G$CY$0$0 == 0x00d7
                     00D7   412 _CY	=	0x00d7
                            413 ;--------------------------------------------------------
                            414 ; overlayable register banks
                            415 ;--------------------------------------------------------
                            416 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     417 	.ds 8
                            418 ;--------------------------------------------------------
                            419 ; internal ram data
                            420 ;--------------------------------------------------------
                            421 	.area DSEG    (DATA)
                     0000   422 Lfrequencimetro_simples.posicionaCursor$lin$1$28==.
   0000                     423 _posicionaCursor_PARM_2:
   0000                     424 	.ds 1
                     0001   425 Lfrequencimetro_simples.posicionaCursor4bits$lin$1$41==.
   0001                     426 _posicionaCursor4bits_PARM_2:
   0001                     427 	.ds 1
                     0002   428 G$ndigitos$0$0==.
   0002                     429 _ndigitos::
   0002                     430 	.ds 1
                     0003   431 G$estouros$0$0==.
   0003                     432 _estouros::
   0003                     433 	.ds 1
                     0004   434 G$ascii$0$0==.
   0004                     435 _ascii::
   0004                     436 	.ds 6
                     000A   437 Lfrequencimetro_simples.main$sloc0$1$0==.
   000A                     438 _main_sloc0_1_0:
   000A                     439 	.ds 4
                     000E   440 Lfrequencimetro_simples.pow$pot$1$53==.
   000E                     441 _pow_PARM_2:
   000E                     442 	.ds 1
                     000F   443 Lfrequencimetro_simples.pow$resp$1$54==.
   000F                     444 _pow_resp_1_54:
   000F                     445 	.ds 4
                     0013   446 Lfrequencimetro_simples.asciiNum$num$1$56==.
   0013                     447 _asciiNum_num_1_56:
   0013                     448 	.ds 4
                     0017   449 Lfrequencimetro_simples.asciiNum$a$1$57==.
   0017                     450 _asciiNum_a_1_57:
   0017                     451 	.ds 4
                            452 ;--------------------------------------------------------
                            453 ; overlayable items in internal ram 
                            454 ;--------------------------------------------------------
                            455 ;--------------------------------------------------------
                            456 ; Stack segment in internal ram 
                            457 ;--------------------------------------------------------
                            458 	.area	SSEG	(DATA)
   0000                     459 __start__stack:
   0000                     460 	.ds	1
                            461 
                            462 ;--------------------------------------------------------
                            463 ; indirectly addressable internal ram data
                            464 ;--------------------------------------------------------
                            465 	.area ISEG    (DATA)
                            466 ;--------------------------------------------------------
                            467 ; absolute internal ram data
                            468 ;--------------------------------------------------------
                            469 	.area IABS    (ABS,DATA)
                            470 	.area IABS    (ABS,DATA)
                            471 ;--------------------------------------------------------
                            472 ; bit data
                            473 ;--------------------------------------------------------
                            474 	.area BSEG    (BIT)
                            475 ;--------------------------------------------------------
                            476 ; paged external ram data
                            477 ;--------------------------------------------------------
                            478 	.area PSEG    (PAG,XDATA)
                            479 ;--------------------------------------------------------
                            480 ; external ram data
                            481 ;--------------------------------------------------------
                            482 	.area XSEG    (XDATA)
                            483 ;--------------------------------------------------------
                            484 ; absolute external ram data
                            485 ;--------------------------------------------------------
                            486 	.area XABS    (ABS,XDATA)
                            487 ;--------------------------------------------------------
                            488 ; external initialized ram data
                            489 ;--------------------------------------------------------
                            490 	.area XISEG   (XDATA)
                            491 	.area HOME    (CODE)
                            492 	.area GSINIT0 (CODE)
                            493 	.area GSINIT1 (CODE)
                            494 	.area GSINIT2 (CODE)
                            495 	.area GSINIT3 (CODE)
                            496 	.area GSINIT4 (CODE)
                            497 	.area GSINIT5 (CODE)
                            498 	.area GSINIT  (CODE)
                            499 	.area GSFINAL (CODE)
                            500 	.area CSEG    (CODE)
                            501 ;--------------------------------------------------------
                            502 ; interrupt vector 
                            503 ;--------------------------------------------------------
                            504 	.area HOME    (CODE)
   0000                     505 __interrupt_vect:
   0000 02r00r00      [24]  506 	ljmp	__sdcc_gsinit_startup
   0003 32            [24]  507 	reti
   0004                     508 	.ds	7
   000B 32            [24]  509 	reti
   000C                     510 	.ds	7
   0013 32            [24]  511 	reti
   0014                     512 	.ds	7
   001B 02r02r15      [24]  513 	ljmp	_estourot1
                            514 ;--------------------------------------------------------
                            515 ; global & static initialisations
                            516 ;--------------------------------------------------------
                            517 	.area HOME    (CODE)
                            518 	.area GSINIT  (CODE)
                            519 	.area GSFINAL (CODE)
                            520 	.area GSINIT  (CODE)
                            521 	.globl __sdcc_gsinit_startup
                            522 	.globl __sdcc_program_startup
                            523 	.globl __start__stack
                            524 	.globl __mcs51_genXINIT
                            525 	.globl __mcs51_genXRAMCLEAR
                            526 	.globl __mcs51_genRAMCLEAR
                     0000   527 	C$frequencimetro_simples.c$9$1$57 ==.
                            528 ;	frequencimetro_simples.c:9: char ndigitos=0; //deve ser signed por causa do for
   0000 75*02 00      [24]  529 	mov	_ndigitos,#0x00
                     0003   530 	C$frequencimetro_simples.c$10$1$57 ==.
                            531 ;	frequencimetro_simples.c:10: volatile unsigned char estouros=0;
   0003 75*03 00      [24]  532 	mov	_estouros,#0x00
                     0006   533 	C$frequencimetro_simples.c$11$1$57 ==.
                            534 ;	frequencimetro_simples.c:11: char ascii[6]={48,48,48,48,48,48};  //cm, dm, m, c, d, u
   0006 75*04 30      [24]  535 	mov	_ascii,#0x30
   0009 75*05 30      [24]  536 	mov	(_ascii + 0x0001),#0x30
   000C 75*06 30      [24]  537 	mov	(_ascii + 0x0002),#0x30
   000F 75*07 30      [24]  538 	mov	(_ascii + 0x0003),#0x30
   0012 75*08 30      [24]  539 	mov	(_ascii + 0x0004),#0x30
   0015 75*09 30      [24]  540 	mov	(_ascii + 0x0005),#0x30
                            541 	.area GSFINAL (CODE)
   0000 02r00r1E      [24]  542 	ljmp	__sdcc_program_startup
                            543 ;--------------------------------------------------------
                            544 ; Home
                            545 ;--------------------------------------------------------
                            546 	.area HOME    (CODE)
                            547 	.area HOME    (CODE)
   001E                     548 __sdcc_program_startup:
   001E 02r02r1A      [24]  549 	ljmp	_main
                            550 ;	return from main will return to caller
                            551 ;--------------------------------------------------------
                            552 ; code
                            553 ;--------------------------------------------------------
                            554 	.area CSEG    (CODE)
                            555 ;------------------------------------------------------------
                            556 ;Allocation info for local variables in function 'atraso'
                            557 ;------------------------------------------------------------
                            558 ;tempo                     Allocated to registers r7 
                            559 ;------------------------------------------------------------
                     0000   560 	G$atraso$0$0 ==.
                     0000   561 	C$atraso.h$5$0$0 ==.
                            562 ;	atraso.h:5: void atraso(unsigned char tempo){
                            563 ;	-----------------------------------------
                            564 ;	 function atraso
                            565 ;	-----------------------------------------
   0000                     566 _atraso:
                     0007   567 	ar7 = 0x07
                     0006   568 	ar6 = 0x06
                     0005   569 	ar5 = 0x05
                     0004   570 	ar4 = 0x04
                     0003   571 	ar3 = 0x03
                     0002   572 	ar2 = 0x02
                     0001   573 	ar1 = 0x01
                     0000   574 	ar0 = 0x00
   0000 AF 82         [24]  575 	mov	r7,dpl
                     0002   576 	C$atraso.h$6$1$2 ==.
                            577 ;	atraso.h:6: if(tempo==1){
   0002 BF 01 14      [24]  578 	cjne	r7,#0x01,00105$
                     0005   579 	C$atraso.h$8$2$3 ==.
                            580 ;	atraso.h:8: TMOD=TMOD & 0xF0;
   0005 53 89 F0      [24]  581 	anl	_TMOD,#0xF0
                     0008   582 	C$atraso.h$9$2$3 ==.
                            583 ;	atraso.h:9: TL0=0;    /*prescaler de 5bits*/
   0008 75 8A 00      [24]  584 	mov	_TL0,#0x00
                     000B   585 	C$atraso.h$10$2$3 ==.
                            586 ;	atraso.h:10: TH0=224;
   000B 75 8C E0      [24]  587 	mov	_TH0,#0xE0
                     000E   588 	C$atraso.h$11$2$3 ==.
                            589 ;	atraso.h:11: TR0=1;
   000E D2 8C         [12]  590 	setb	_TR0
                     0010   591 	C$atraso.h$12$2$3 ==.
                            592 ;	atraso.h:12: while(!TF0);
   0010                     593 00101$:
                     0010   594 	C$atraso.h$13$2$3 ==.
                            595 ;	atraso.h:13: TF0=0;
   0010 10 8D 02      [24]  596 	jbc	_TF0,00162$
   0013 80 FB         [24]  597 	sjmp	00101$
   0015                     598 00162$:
                     0015   599 	C$atraso.h$14$2$3 ==.
                            600 ;	atraso.h:14: TR0=0;
   0015 C2 8C         [12]  601 	clr	_TR0
                     0017   602 	C$atraso.h$15$2$3 ==.
                            603 ;	atraso.h:15: return;
   0017 80 3A         [24]  604 	sjmp	00122$
   0019                     605 00105$:
                     0019   606 	C$atraso.h$17$1$2 ==.
                            607 ;	atraso.h:17: if(tempo==15){
   0019 BF 0F 1D      [24]  608 	cjne	r7,#0x0F,00113$
                     001C   609 	C$atraso.h$18$2$4 ==.
                            610 ;	atraso.h:18: TMOD=TMOD & 0xF0;   /*prescaler*/
   001C 53 89 F0      [24]  611 	anl	_TMOD,#0xF0
                     001F   612 	C$atraso.h$19$2$4 ==.
                            613 ;	atraso.h:19: TL0=0;
   001F 75 8A 00      [24]  614 	mov	_TL0,#0x00
                     0022   615 	C$atraso.h$20$2$4 ==.
                            616 ;	atraso.h:20: TH0=224;
   0022 75 8C E0      [24]  617 	mov	_TH0,#0xE0
                     0025   618 	C$atraso.h$21$2$4 ==.
                            619 ;	atraso.h:21: TR0=1;
   0025 D2 8C         [12]  620 	setb	_TR0
                     0027   621 	C$atraso.h$22$2$4 ==.
                            622 ;	atraso.h:22: while(tempo>0){
   0027                     623 00109$:
   0027 EF            [12]  624 	mov	a,r7
   0028 60 0B         [24]  625 	jz	00111$
                     002A   626 	C$atraso.h$23$3$5 ==.
                            627 ;	atraso.h:23: while(!TF0);
   002A                     628 00106$:
   002A 30 8D FD      [24]  629 	jnb	_TF0,00106$
                     002D   630 	C$atraso.h$24$3$5 ==.
                            631 ;	atraso.h:24: tempo--;
   002D 1F            [12]  632 	dec	r7
                     002E   633 	C$atraso.h$25$3$5 ==.
                            634 ;	atraso.h:25: TF0=0;
   002E C2 8D         [12]  635 	clr	_TF0
                     0030   636 	C$atraso.h$26$3$5 ==.
                            637 ;	atraso.h:26: TH0=224;
   0030 75 8C E0      [24]  638 	mov	_TH0,#0xE0
   0033 80 F2         [24]  639 	sjmp	00109$
   0035                     640 00111$:
                     0035   641 	C$atraso.h$28$2$4 ==.
                            642 ;	atraso.h:28: TR0=0;
   0035 C2 8C         [12]  643 	clr	_TR0
                     0037   644 	C$atraso.h$29$2$4 ==.
                            645 ;	atraso.h:29: return;
   0037 80 1A         [24]  646 	sjmp	00122$
   0039                     647 00113$:
                     0039   648 	C$atraso.h$31$1$2 ==.
                            649 ;	atraso.h:31: if(tempo==100){	/*2*50ms*/
   0039 BF 64 17      [24]  650 	cjne	r7,#0x64,00122$
                     003C   651 	C$atraso.h$32$2$6 ==.
                            652 ;	atraso.h:32: TMOD=TMOD | 0x01;/*16bits*/
   003C 43 89 01      [24]  653 	orl	_TMOD,#0x01
                     003F   654 	C$atraso.h$33$2$6 ==.
                            655 ;	atraso.h:33: TR0=1;
   003F D2 8C         [12]  656 	setb	_TR0
                     0041   657 	C$atraso.h$34$2$6 ==.
                            658 ;	atraso.h:34: while(tempo>98){
   0041                     659 00117$:
   0041 EF            [12]  660 	mov	a,r7
   0042 24 9D         [12]  661 	add	a,#0xff - 0x62
   0044 50 0B         [24]  662 	jnc	00119$
                     0046   663 	C$atraso.h$35$3$7 ==.
                            664 ;	atraso.h:35: TH0=59;
   0046 75 8C 3B      [24]  665 	mov	_TH0,#0x3B
                     0049   666 	C$atraso.h$36$3$7 ==.
                            667 ;	atraso.h:36: while(!TF0);
   0049                     668 00114$:
                     0049   669 	C$atraso.h$37$3$7 ==.
                            670 ;	atraso.h:37: TF0=0;
   0049 10 8D 02      [24]  671 	jbc	_TF0,00170$
   004C 80 FB         [24]  672 	sjmp	00114$
   004E                     673 00170$:
                     004E   674 	C$atraso.h$38$3$7 ==.
                            675 ;	atraso.h:38: tempo--;
   004E 1F            [12]  676 	dec	r7
   004F 80 F0         [24]  677 	sjmp	00117$
   0051                     678 00119$:
                     0051   679 	C$atraso.h$40$2$6 ==.
                            680 ;	atraso.h:40: TR0=0;
   0051 C2 8C         [12]  681 	clr	_TR0
                     0053   682 	C$atraso.h$41$2$6 ==.
                            683 ;	atraso.h:41: return;
   0053                     684 00122$:
                     0053   685 	C$atraso.h$43$1$2 ==.
                     0053   686 	XG$atraso$0$0 ==.
   0053 22            [24]  687 	ret
                            688 ;------------------------------------------------------------
                            689 ;Allocation info for local variables in function 'divideMsg'
                            690 ;------------------------------------------------------------
                            691 ;msg                       Allocated to registers r7 
                            692 ;------------------------------------------------------------
                     0054   693 	G$divideMsg$0$0 ==.
                     0054   694 	C$lcd.h$42$1$2 ==.
                            695 ;	lcd.h:42: void divideMsg(unsigned char msg){
                            696 ;	-----------------------------------------
                            697 ;	 function divideMsg
                            698 ;	-----------------------------------------
   0054                     699 _divideMsg:
   0054 AF 82         [24]  700 	mov	r7,dpl
                     0056   701 	C$lcd.h$43$1$18 ==.
                            702 ;	lcd.h:43: P0=msg&0xF0;     		/*mantem nibble mais significativo*/
   0056 74 F0         [12]  703 	mov	a,#0xF0
   0058 5F            [12]  704 	anl	a,r7
   0059 F5 80         [12]  705 	mov	_P0,a
                     005B   706 	C$lcd.h$44$1$18 ==.
                            707 ;	lcd.h:44: P2=msg;		 		/*envia nibble menos significativo*/
   005B 8F A0         [24]  708 	mov	_P2,r7
                     005D   709 	C$lcd.h$45$1$18 ==.
                            710 ;	lcd.h:45: return;
                     005D   711 	C$lcd.h$46$1$18 ==.
                     005D   712 	XG$divideMsg$0$0 ==.
   005D 22            [24]  713 	ret
                            714 ;------------------------------------------------------------
                            715 ;Allocation info for local variables in function 'imprimeChar'
                            716 ;------------------------------------------------------------
                            717 ;msg                       Allocated to registers r7 
                            718 ;------------------------------------------------------------
                     005E   719 	G$imprimeChar$0$0 ==.
                     005E   720 	C$lcd.h$48$1$18 ==.
                            721 ;	lcd.h:48: void imprimeChar(unsigned char msg){
                            722 ;	-----------------------------------------
                            723 ;	 function imprimeChar
                            724 ;	-----------------------------------------
   005E                     725 _imprimeChar:
                     005E   726 	C$lcd.h$49$1$20 ==.
                            727 ;	lcd.h:49: divideMsg(msg);
   005E 12r00r54      [24]  728 	lcall	_divideMsg
                     0061   729 	C$lcd.h$50$1$20 ==.
                            730 ;	lcd.h:50: RS=1;			/*dado*/
   0061 D2 80         [12]  731 	setb	_P0_0
                     0063   732 	C$lcd.h$51$1$20 ==.
                            733 ;	lcd.h:51: EN=1;
   0063 D2 82         [12]  734 	setb	_P0_2
                     0065   735 	C$lcd.h$52$1$20 ==.
                            736 ;	lcd.h:52: atraso(15);
   0065 75 82 0F      [24]  737 	mov	dpl,#0x0F
   0068 12r00r00      [24]  738 	lcall	_atraso
                     006B   739 	C$lcd.h$53$1$20 ==.
                            740 ;	lcd.h:53: EN=0;
   006B C2 82         [12]  741 	clr	_P0_2
                     006D   742 	C$lcd.h$54$1$20 ==.
                            743 ;	lcd.h:54: return;
                     006D   744 	C$lcd.h$55$1$20 ==.
                     006D   745 	XG$imprimeChar$0$0 ==.
   006D 22            [24]  746 	ret
                            747 ;------------------------------------------------------------
                            748 ;Allocation info for local variables in function 'imprimeFrase'
                            749 ;------------------------------------------------------------
                            750 ;msg                       Allocated to registers r5 r6 r7 
                            751 ;i                         Allocated to registers r4 
                            752 ;------------------------------------------------------------
                     006E   753 	G$imprimeFrase$0$0 ==.
                     006E   754 	C$lcd.h$57$1$20 ==.
                            755 ;	lcd.h:57: void imprimeFrase(unsigned char *msg){
                            756 ;	-----------------------------------------
                            757 ;	 function imprimeFrase
                            758 ;	-----------------------------------------
   006E                     759 _imprimeFrase:
   006E AD 82         [24]  760 	mov	r5,dpl
   0070 AE 83         [24]  761 	mov	r6,dph
   0072 AF F0         [24]  762 	mov	r7,b
                     0074   763 	C$lcd.h$58$1$20 ==.
                            764 ;	lcd.h:58: unsigned char i=0;
   0074 7C 00         [12]  765 	mov	r4,#0x00
                     0076   766 	C$lcd.h$59$1$22 ==.
                            767 ;	lcd.h:59: while(*msg){			/*verifica fim da string*/
   0076                     768 00103$:
   0076 8D 82         [24]  769 	mov	dpl,r5
   0078 8E 83         [24]  770 	mov	dph,r6
   007A 8F F0         [24]  771 	mov	b,r7
   007C 12r00r00      [24]  772 	lcall	__gptrget
   007F FB            [12]  773 	mov	r3,a
   0080 60 45         [24]  774 	jz	00105$
                     0082   775 	C$lcd.h$60$2$23 ==.
                            776 ;	lcd.h:60: divideMsg(*msg);
   0082 8B 82         [24]  777 	mov	dpl,r3
   0084 C0 07         [24]  778 	push	ar7
   0086 C0 06         [24]  779 	push	ar6
   0088 C0 05         [24]  780 	push	ar5
   008A C0 04         [24]  781 	push	ar4
   008C 12r00r54      [24]  782 	lcall	_divideMsg
                     008F   783 	C$lcd.h$61$2$23 ==.
                            784 ;	lcd.h:61: RS=1;			/*dado*/
   008F D2 80         [12]  785 	setb	_P0_0
                     0091   786 	C$lcd.h$62$2$23 ==.
                            787 ;	lcd.h:62: EN=1;
   0091 D2 82         [12]  788 	setb	_P0_2
                     0093   789 	C$lcd.h$63$2$23 ==.
                            790 ;	lcd.h:63: atraso(15);
   0093 75 82 0F      [24]  791 	mov	dpl,#0x0F
   0096 12r00r00      [24]  792 	lcall	_atraso
   0099 D0 04         [24]  793 	pop	ar4
   009B D0 05         [24]  794 	pop	ar5
   009D D0 06         [24]  795 	pop	ar6
   009F D0 07         [24]  796 	pop	ar7
                     00A1   797 	C$lcd.h$64$2$23 ==.
                            798 ;	lcd.h:64: EN=0;
   00A1 C2 82         [12]  799 	clr	_P0_2
                     00A3   800 	C$lcd.h$65$2$23 ==.
                            801 ;	lcd.h:65: msg++;
   00A3 0D            [12]  802 	inc	r5
   00A4 BD 00 01      [24]  803 	cjne	r5,#0x00,00118$
   00A7 0E            [12]  804 	inc	r6
   00A8                     805 00118$:
                     00A8   806 	C$lcd.h$66$2$23 ==.
                            807 ;	lcd.h:66: i++;
   00A8 0C            [12]  808 	inc	r4
                     00A9   809 	C$lcd.h$67$2$23 ==.
                            810 ;	lcd.h:67: if(i==15)
   00A9 BC 0F CA      [24]  811 	cjne	r4,#0x0F,00103$
                     00AC   812 	C$lcd.h$68$2$23 ==.
                            813 ;	lcd.h:68: posicionaCursor(0, 2);		/*vai para linha 2*/
   00AC 75*00 02      [24]  814 	mov	_posicionaCursor_PARM_2,#0x02
   00AF 75 82 00      [24]  815 	mov	dpl,#0x00
   00B2 C0 07         [24]  816 	push	ar7
   00B4 C0 06         [24]  817 	push	ar6
   00B6 C0 05         [24]  818 	push	ar5
   00B8 C0 04         [24]  819 	push	ar4
   00BA 12r00rE9      [24]  820 	lcall	_posicionaCursor
   00BD D0 04         [24]  821 	pop	ar4
   00BF D0 05         [24]  822 	pop	ar5
   00C1 D0 06         [24]  823 	pop	ar6
   00C3 D0 07         [24]  824 	pop	ar7
   00C5 80 AF         [24]  825 	sjmp	00103$
   00C7                     826 00105$:
                     00C7   827 	C$lcd.h$70$1$22 ==.
                            828 ;	lcd.h:70: return;
                     00C7   829 	C$lcd.h$71$1$22 ==.
                     00C7   830 	XG$imprimeFrase$0$0 ==.
   00C7 22            [24]  831 	ret
                            832 ;------------------------------------------------------------
                            833 ;Allocation info for local variables in function 'imprimeInst'
                            834 ;------------------------------------------------------------
                            835 ;inst                      Allocated to registers 
                            836 ;------------------------------------------------------------
                     00C8   837 	G$imprimeInst$0$0 ==.
                     00C8   838 	C$lcd.h$73$1$22 ==.
                            839 ;	lcd.h:73: void imprimeInst(unsigned char inst){
                            840 ;	-----------------------------------------
                            841 ;	 function imprimeInst
                            842 ;	-----------------------------------------
   00C8                     843 _imprimeInst:
                     00C8   844 	C$lcd.h$74$1$25 ==.
                            845 ;	lcd.h:74: divideMsg(inst);
   00C8 12r00r54      [24]  846 	lcall	_divideMsg
                     00CB   847 	C$lcd.h$75$1$25 ==.
                            848 ;	lcd.h:75: EN=1;
   00CB D2 82         [12]  849 	setb	_P0_2
                     00CD   850 	C$lcd.h$76$1$25 ==.
                            851 ;	lcd.h:76: atraso(15);
   00CD 75 82 0F      [24]  852 	mov	dpl,#0x0F
   00D0 12r00r00      [24]  853 	lcall	_atraso
                     00D3   854 	C$lcd.h$77$1$25 ==.
                            855 ;	lcd.h:77: EN=0;
   00D3 C2 82         [12]  856 	clr	_P0_2
                     00D5   857 	C$lcd.h$78$1$25 ==.
                            858 ;	lcd.h:78: return;
                     00D5   859 	C$lcd.h$79$1$25 ==.
                     00D5   860 	XG$imprimeInst$0$0 ==.
   00D5 22            [24]  861 	ret
                            862 ;------------------------------------------------------------
                            863 ;Allocation info for local variables in function 'initLCD'
                            864 ;------------------------------------------------------------
                     00D6   865 	G$initLCD$0$0 ==.
                     00D6   866 	C$lcd.h$81$1$25 ==.
                            867 ;	lcd.h:81: void initLCD(void){
                            868 ;	-----------------------------------------
                            869 ;	 function initLCD
                            870 ;	-----------------------------------------
   00D6                     871 _initLCD:
                     00D6   872 	C$lcd.h$82$1$27 ==.
                            873 ;	lcd.h:82: imprimeInst(0x38);		/*duas linhas e 8bits*/
   00D6 75 82 38      [24]  874 	mov	dpl,#0x38
   00D9 12r00rC8      [24]  875 	lcall	_imprimeInst
                     00DC   876 	C$lcd.h$83$1$27 ==.
                            877 ;	lcd.h:83: imprimeInst(0x0F);		/*liga LCD e pisca cursor*/
   00DC 75 82 0F      [24]  878 	mov	dpl,#0x0F
   00DF 12r00rC8      [24]  879 	lcall	_imprimeInst
                     00E2   880 	C$lcd.h$84$1$27 ==.
                            881 ;	lcd.h:84: imprimeInst(0x06);		/*LCD para receber e cursor move para direita*/
   00E2 75 82 06      [24]  882 	mov	dpl,#0x06
   00E5 12r00rC8      [24]  883 	lcall	_imprimeInst
                     00E8   884 	C$lcd.h$85$1$27 ==.
                            885 ;	lcd.h:85: return;
                     00E8   886 	C$lcd.h$86$1$27 ==.
                     00E8   887 	XG$initLCD$0$0 ==.
   00E8 22            [24]  888 	ret
                            889 ;------------------------------------------------------------
                            890 ;Allocation info for local variables in function 'posicionaCursor'
                            891 ;------------------------------------------------------------
                            892 ;lin                       Allocated with name '_posicionaCursor_PARM_2'
                            893 ;end                       Allocated to registers r7 
                            894 ;------------------------------------------------------------
                     00E9   895 	G$posicionaCursor$0$0 ==.
                     00E9   896 	C$lcd.h$88$1$27 ==.
                            897 ;	lcd.h:88: void posicionaCursor(unsigned char end, unsigned char lin){		/*end=endereço em que se deseja imprimir*/
                            898 ;	-----------------------------------------
                            899 ;	 function posicionaCursor
                            900 ;	-----------------------------------------
   00E9                     901 _posicionaCursor:
   00E9 AF 82         [24]  902 	mov	r7,dpl
                     00EB   903 	C$lcd.h$90$2$30 ==.
                            904 ;	lcd.h:90: end=end+0x80;
   00EB 74 80         [12]  905 	mov	a,#0x80
   00ED 2F            [12]  906 	add	a,r7
                     00EE   907 	C$lcd.h$91$2$30 ==.
                            908 ;	lcd.h:91: imprimeInst(end);
   00EE FF            [12]  909 	mov	r7,a
   00EF F5 82         [12]  910 	mov	dpl,a
   00F1 C0 07         [24]  911 	push	ar7
   00F3 12r00rC8      [24]  912 	lcall	_imprimeInst
   00F6 D0 07         [24]  913 	pop	ar7
                     00F8   914 	C$lcd.h$94$2$31 ==.
                            915 ;	lcd.h:94: end=end+0xC0;			/*primeira posição da seg.linha=40h*/
   00F8 74 C0         [12]  916 	mov	a,#0xC0
   00FA 2F            [12]  917 	add	a,r7
                     00FB   918 	C$lcd.h$95$2$31 ==.
                            919 ;	lcd.h:95: imprimeInst(end);
   00FB F5 82         [12]  920 	mov	dpl,a
   00FD 12r00rC8      [24]  921 	lcall	_imprimeInst
                     0100   922 	C$lcd.h$97$1$29 ==.
                            923 ;	lcd.h:97: return;
                     0100   924 	C$lcd.h$98$1$29 ==.
                     0100   925 	XG$posicionaCursor$0$0 ==.
   0100 22            [24]  926 	ret
                            927 ;------------------------------------------------------------
                            928 ;Allocation info for local variables in function 'imprimeChar4bits'
                            929 ;------------------------------------------------------------
                            930 ;msg                       Allocated to registers r7 
                            931 ;------------------------------------------------------------
                     0101   932 	G$imprimeChar4bits$0$0 ==.
                     0101   933 	C$lcd.h$101$1$29 ==.
                            934 ;	lcd.h:101: void imprimeChar4bits (unsigned char msg){
                            935 ;	-----------------------------------------
                            936 ;	 function imprimeChar4bits
                            937 ;	-----------------------------------------
   0101                     938 _imprimeChar4bits:
   0101 AF 82         [24]  939 	mov	r7,dpl
                     0103   940 	C$lcd.h$102$1$33 ==.
                            941 ;	lcd.h:102: P0=msg&0xF0;/*nibble mais significativo*/
   0103 74 F0         [12]  942 	mov	a,#0xF0
   0105 5F            [12]  943 	anl	a,r7
   0106 F5 80         [12]  944 	mov	_P0,a
                     0108   945 	C$lcd.h$103$1$33 ==.
                            946 ;	lcd.h:103: RS=1;
   0108 D2 80         [12]  947 	setb	_P0_0
                     010A   948 	C$lcd.h$104$1$33 ==.
                            949 ;	lcd.h:104: EN=1;
   010A D2 82         [12]  950 	setb	_P0_2
                     010C   951 	C$lcd.h$105$1$33 ==.
                            952 ;	lcd.h:105: atraso(15);
   010C 75 82 0F      [24]  953 	mov	dpl,#0x0F
   010F C0 07         [24]  954 	push	ar7
   0111 12r00r00      [24]  955 	lcall	_atraso
   0114 D0 07         [24]  956 	pop	ar7
                     0116   957 	C$lcd.h$106$1$33 ==.
                            958 ;	lcd.h:106: EN=0;
   0116 C2 82         [12]  959 	clr	_P0_2
                     0118   960 	C$lcd.h$107$1$33 ==.
                            961 ;	lcd.h:107: P0=(msg<<4)&0xF0;/*nibble menos significativo*/
   0118 EF            [12]  962 	mov	a,r7
   0119 C4            [12]  963 	swap	a
   011A 54 F0         [12]  964 	anl	a,#0xF0
   011C FF            [12]  965 	mov	r7,a
   011D 74 F0         [12]  966 	mov	a,#0xF0
   011F 5F            [12]  967 	anl	a,r7
   0120 F5 80         [12]  968 	mov	_P0,a
                     0122   969 	C$lcd.h$108$1$33 ==.
                            970 ;	lcd.h:108: RS=1;
   0122 D2 80         [12]  971 	setb	_P0_0
                     0124   972 	C$lcd.h$109$1$33 ==.
                            973 ;	lcd.h:109: EN=1;
   0124 D2 82         [12]  974 	setb	_P0_2
                     0126   975 	C$lcd.h$110$1$33 ==.
                            976 ;	lcd.h:110: atraso(15);
   0126 75 82 0F      [24]  977 	mov	dpl,#0x0F
   0129 12r00r00      [24]  978 	lcall	_atraso
                     012C   979 	C$lcd.h$111$1$33 ==.
                            980 ;	lcd.h:111: EN=0;
   012C C2 82         [12]  981 	clr	_P0_2
                     012E   982 	C$lcd.h$112$1$33 ==.
                            983 ;	lcd.h:112: return;
                     012E   984 	C$lcd.h$113$1$33 ==.
                     012E   985 	XG$imprimeChar4bits$0$0 ==.
   012E 22            [24]  986 	ret
                            987 ;------------------------------------------------------------
                            988 ;Allocation info for local variables in function 'imprimeFrase4bits'
                            989 ;------------------------------------------------------------
                            990 ;msg                       Allocated to registers r5 r6 r7 
                            991 ;i                         Allocated to registers r4 
                            992 ;------------------------------------------------------------
                     012F   993 	G$imprimeFrase4bits$0$0 ==.
                     012F   994 	C$lcd.h$115$1$33 ==.
                            995 ;	lcd.h:115: void imprimeFrase4bits (unsigned char *msg){
                            996 ;	-----------------------------------------
                            997 ;	 function imprimeFrase4bits
                            998 ;	-----------------------------------------
   012F                     999 _imprimeFrase4bits:
   012F AD 82         [24] 1000 	mov	r5,dpl
   0131 AE 83         [24] 1001 	mov	r6,dph
   0133 AF F0         [24] 1002 	mov	r7,b
                     0135  1003 	C$lcd.h$116$1$33 ==.
                           1004 ;	lcd.h:116: char i=0;
   0135 7C 00         [12] 1005 	mov	r4,#0x00
                     0137  1006 	C$lcd.h$117$1$35 ==.
                           1007 ;	lcd.h:117: while(*msg){
   0137                    1008 00103$:
   0137 8D 82         [24] 1009 	mov	dpl,r5
   0139 8E 83         [24] 1010 	mov	dph,r6
   013B 8F F0         [24] 1011 	mov	b,r7
   013D 12r00r00      [24] 1012 	lcall	__gptrget
   0140 FB            [12] 1013 	mov	r3,a
   0141 60 76         [24] 1014 	jz	00105$
                     0143  1015 	C$lcd.h$118$2$36 ==.
                           1016 ;	lcd.h:118: P0=*msg&0xF0;/*nibble mais significativo*/
   0143 74 F0         [12] 1017 	mov	a,#0xF0
   0145 5B            [12] 1018 	anl	a,r3
   0146 F5 80         [12] 1019 	mov	_P0,a
                     0148  1020 	C$lcd.h$119$2$36 ==.
                           1021 ;	lcd.h:119: RS=1;
   0148 D2 80         [12] 1022 	setb	_P0_0
                     014A  1023 	C$lcd.h$120$2$36 ==.
                           1024 ;	lcd.h:120: EN=1;
   014A D2 82         [12] 1025 	setb	_P0_2
                     014C  1026 	C$lcd.h$121$2$36 ==.
                           1027 ;	lcd.h:121: atraso(15);
   014C 75 82 0F      [24] 1028 	mov	dpl,#0x0F
   014F C0 07         [24] 1029 	push	ar7
   0151 C0 06         [24] 1030 	push	ar6
   0153 C0 05         [24] 1031 	push	ar5
   0155 C0 04         [24] 1032 	push	ar4
   0157 12r00r00      [24] 1033 	lcall	_atraso
   015A D0 04         [24] 1034 	pop	ar4
   015C D0 05         [24] 1035 	pop	ar5
   015E D0 06         [24] 1036 	pop	ar6
   0160 D0 07         [24] 1037 	pop	ar7
                     0162  1038 	C$lcd.h$122$2$36 ==.
                           1039 ;	lcd.h:122: EN=0;
   0162 C2 82         [12] 1040 	clr	_P0_2
                     0164  1041 	C$lcd.h$123$2$36 ==.
                           1042 ;	lcd.h:123: P0=(*msg<<4)&0xF0;/*nibble menos significativo*/
   0164 8D 82         [24] 1043 	mov	dpl,r5
   0166 8E 83         [24] 1044 	mov	dph,r6
   0168 8F F0         [24] 1045 	mov	b,r7
   016A 12r00r00      [24] 1046 	lcall	__gptrget
   016D FB            [12] 1047 	mov	r3,a
   016E A3            [24] 1048 	inc	dptr
   016F AD 82         [24] 1049 	mov	r5,dpl
   0171 AE 83         [24] 1050 	mov	r6,dph
   0173 EB            [12] 1051 	mov	a,r3
   0174 C4            [12] 1052 	swap	a
   0175 54 F0         [12] 1053 	anl	a,#0xF0
   0177 FB            [12] 1054 	mov	r3,a
   0178 74 F0         [12] 1055 	mov	a,#0xF0
   017A 5B            [12] 1056 	anl	a,r3
   017B F5 80         [12] 1057 	mov	_P0,a
                     017D  1058 	C$lcd.h$124$2$36 ==.
                           1059 ;	lcd.h:124: RS=1;
   017D D2 80         [12] 1060 	setb	_P0_0
                     017F  1061 	C$lcd.h$125$2$36 ==.
                           1062 ;	lcd.h:125: EN=1;
   017F D2 82         [12] 1063 	setb	_P0_2
                     0181  1064 	C$lcd.h$126$2$36 ==.
                           1065 ;	lcd.h:126: atraso(15);
   0181 75 82 0F      [24] 1066 	mov	dpl,#0x0F
   0184 C0 07         [24] 1067 	push	ar7
   0186 C0 06         [24] 1068 	push	ar6
   0188 C0 05         [24] 1069 	push	ar5
   018A C0 04         [24] 1070 	push	ar4
   018C 12r00r00      [24] 1071 	lcall	_atraso
   018F D0 04         [24] 1072 	pop	ar4
   0191 D0 05         [24] 1073 	pop	ar5
   0193 D0 06         [24] 1074 	pop	ar6
   0195 D0 07         [24] 1075 	pop	ar7
                     0197  1076 	C$lcd.h$127$2$36 ==.
                           1077 ;	lcd.h:127: EN=0;
   0197 C2 82         [12] 1078 	clr	_P0_2
                     0199  1079 	C$lcd.h$128$2$36 ==.
                           1080 ;	lcd.h:128: msg++;
                     0199  1081 	C$lcd.h$129$2$36 ==.
                           1082 ;	lcd.h:129: i++;
   0199 0C            [12] 1083 	inc	r4
                     019A  1084 	C$lcd.h$130$2$36 ==.
                           1085 ;	lcd.h:130: if(i==15)
   019A BC 0F 9A      [24] 1086 	cjne	r4,#0x0F,00103$
                     019D  1087 	C$lcd.h$131$2$36 ==.
                           1088 ;	lcd.h:131: posicionaCursor4bits(0,2);/*vai para linha 2*/
   019D 75*01 02      [24] 1089 	mov	_posicionaCursor4bits_PARM_2,#0x02
   01A0 75 82 00      [24] 1090 	mov	dpl,#0x00
   01A3 C0 07         [24] 1091 	push	ar7
   01A5 C0 06         [24] 1092 	push	ar6
   01A7 C0 05         [24] 1093 	push	ar5
   01A9 C0 04         [24] 1094 	push	ar4
   01AB 12r01rFD      [24] 1095 	lcall	_posicionaCursor4bits
   01AE D0 04         [24] 1096 	pop	ar4
   01B0 D0 05         [24] 1097 	pop	ar5
   01B2 D0 06         [24] 1098 	pop	ar6
   01B4 D0 07         [24] 1099 	pop	ar7
   01B6 02r01r37      [24] 1100 	ljmp	00103$
   01B9                    1101 00105$:
                     01B9  1102 	C$lcd.h$133$1$35 ==.
                           1103 ;	lcd.h:133: return;
                     01B9  1104 	C$lcd.h$134$1$35 ==.
                     01B9  1105 	XG$imprimeFrase4bits$0$0 ==.
   01B9 22            [24] 1106 	ret
                           1107 ;------------------------------------------------------------
                           1108 ;Allocation info for local variables in function 'imprimeInst4bits'
                           1109 ;------------------------------------------------------------
                           1110 ;msg                       Allocated to registers r7 
                           1111 ;------------------------------------------------------------
                     01BA  1112 	G$imprimeInst4bits$0$0 ==.
                     01BA  1113 	C$lcd.h$136$1$35 ==.
                           1114 ;	lcd.h:136: void imprimeInst4bits(unsigned char msg){
                           1115 ;	-----------------------------------------
                           1116 ;	 function imprimeInst4bits
                           1117 ;	-----------------------------------------
   01BA                    1118 _imprimeInst4bits:
   01BA AF 82         [24] 1119 	mov	r7,dpl
                     01BC  1120 	C$lcd.h$137$1$38 ==.
                           1121 ;	lcd.h:137: P0=msg&0xF0;    		/*nibble mais significativo*/
   01BC 74 F0         [12] 1122 	mov	a,#0xF0
   01BE 5F            [12] 1123 	anl	a,r7
   01BF F5 80         [12] 1124 	mov	_P0,a
                     01C1  1125 	C$lcd.h$138$1$38 ==.
                           1126 ;	lcd.h:138: EN=1;
   01C1 D2 82         [12] 1127 	setb	_P0_2
                     01C3  1128 	C$lcd.h$139$1$38 ==.
                           1129 ;	lcd.h:139: atraso(15);
   01C3 75 82 0F      [24] 1130 	mov	dpl,#0x0F
   01C6 C0 07         [24] 1131 	push	ar7
   01C8 12r00r00      [24] 1132 	lcall	_atraso
   01CB D0 07         [24] 1133 	pop	ar7
                     01CD  1134 	C$lcd.h$140$1$38 ==.
                           1135 ;	lcd.h:140: EN=0;
   01CD C2 82         [12] 1136 	clr	_P0_2
                     01CF  1137 	C$lcd.h$141$1$38 ==.
                           1138 ;	lcd.h:141: P0=(msg<<4)&0xF0;		/*nibble menos significativo*/
   01CF EF            [12] 1139 	mov	a,r7
   01D0 C4            [12] 1140 	swap	a
   01D1 54 F0         [12] 1141 	anl	a,#0xF0
   01D3 FF            [12] 1142 	mov	r7,a
   01D4 74 F0         [12] 1143 	mov	a,#0xF0
   01D6 5F            [12] 1144 	anl	a,r7
   01D7 F5 80         [12] 1145 	mov	_P0,a
                     01D9  1146 	C$lcd.h$142$1$38 ==.
                           1147 ;	lcd.h:142: EN=1;
   01D9 D2 82         [12] 1148 	setb	_P0_2
                     01DB  1149 	C$lcd.h$143$1$38 ==.
                           1150 ;	lcd.h:143: atraso(15);
   01DB 75 82 0F      [24] 1151 	mov	dpl,#0x0F
   01DE 12r00r00      [24] 1152 	lcall	_atraso
                     01E1  1153 	C$lcd.h$144$1$38 ==.
                           1154 ;	lcd.h:144: EN=0;
   01E1 C2 82         [12] 1155 	clr	_P0_2
                     01E3  1156 	C$lcd.h$145$1$38 ==.
                           1157 ;	lcd.h:145: return;
                     01E3  1158 	C$lcd.h$146$1$38 ==.
                     01E3  1159 	XG$imprimeInst4bits$0$0 ==.
   01E3 22            [24] 1160 	ret
                           1161 ;------------------------------------------------------------
                           1162 ;Allocation info for local variables in function 'initLCD4bits'
                           1163 ;------------------------------------------------------------
                     01E4  1164 	G$initLCD4bits$0$0 ==.
                     01E4  1165 	C$lcd.h$148$1$38 ==.
                           1166 ;	lcd.h:148: void initLCD4bits(void){
                           1167 ;	-----------------------------------------
                           1168 ;	 function initLCD4bits
                           1169 ;	-----------------------------------------
   01E4                    1170 _initLCD4bits:
                     01E4  1171 	C$lcd.h$149$1$40 ==.
                           1172 ;	lcd.h:149: imprimeInst(0x28);		/*duas linhas e 4bits. Instrução em 8bits*/
   01E4 75 82 28      [24] 1173 	mov	dpl,#0x28
   01E7 12r00rC8      [24] 1174 	lcall	_imprimeInst
                     01EA  1175 	C$lcd.h$150$1$40 ==.
                           1176 ;	lcd.h:150: imprimeInst4bits(0x0F);		/*liga LCD e pisca cursor*/
   01EA 75 82 0F      [24] 1177 	mov	dpl,#0x0F
   01ED 12r01rBA      [24] 1178 	lcall	_imprimeInst4bits
                     01F0  1179 	C$lcd.h$151$1$40 ==.
                           1180 ;	lcd.h:151: imprimeInst4bits(0x06);		/*LCD para receber e cursor move para direita*/
   01F0 75 82 06      [24] 1181 	mov	dpl,#0x06
   01F3 12r01rBA      [24] 1182 	lcall	_imprimeInst4bits
                     01F6  1183 	C$lcd.h$152$1$40 ==.
                           1184 ;	lcd.h:152: atraso(100);
   01F6 75 82 64      [24] 1185 	mov	dpl,#0x64
   01F9 12r00r00      [24] 1186 	lcall	_atraso
                     01FC  1187 	C$lcd.h$153$1$40 ==.
                           1188 ;	lcd.h:153: return;
                     01FC  1189 	C$lcd.h$154$1$40 ==.
                     01FC  1190 	XG$initLCD4bits$0$0 ==.
   01FC 22            [24] 1191 	ret
                           1192 ;------------------------------------------------------------
                           1193 ;Allocation info for local variables in function 'posicionaCursor4bits'
                           1194 ;------------------------------------------------------------
                           1195 ;lin                       Allocated with name '_posicionaCursor4bits_PARM_2'
                           1196 ;end                       Allocated to registers r7 
                           1197 ;------------------------------------------------------------
                     01FD  1198 	G$posicionaCursor4bits$0$0 ==.
                     01FD  1199 	C$lcd.h$156$1$40 ==.
                           1200 ;	lcd.h:156: void posicionaCursor4bits(unsigned char end, unsigned char lin){	/*end=endereço em que se deseja imprimir.
                           1201 ;	-----------------------------------------
                           1202 ;	 function posicionaCursor4bits
                           1203 ;	-----------------------------------------
   01FD                    1204 _posicionaCursor4bits:
   01FD AF 82         [24] 1205 	mov	r7,dpl
                     01FF  1206 	C$lcd.h$160$2$43 ==.
                           1207 ;	lcd.h:160: end=end+0x80;
   01FF 74 80         [12] 1208 	mov	a,#0x80
   0201 2F            [12] 1209 	add	a,r7
                     0202  1210 	C$lcd.h$161$2$43 ==.
                           1211 ;	lcd.h:161: imprimeInst4bits(end);
   0202 FF            [12] 1212 	mov	r7,a
   0203 F5 82         [12] 1213 	mov	dpl,a
   0205 C0 07         [24] 1214 	push	ar7
   0207 12r01rBA      [24] 1215 	lcall	_imprimeInst4bits
   020A D0 07         [24] 1216 	pop	ar7
                     020C  1217 	C$lcd.h$164$2$44 ==.
                           1218 ;	lcd.h:164: end=end+0xC0;			/*primeira posição da seg.linha=40h*/
   020C 74 C0         [12] 1219 	mov	a,#0xC0
   020E 2F            [12] 1220 	add	a,r7
                     020F  1221 	C$lcd.h$165$2$44 ==.
                           1222 ;	lcd.h:165: imprimeInst4bits(end);
   020F F5 82         [12] 1223 	mov	dpl,a
   0211 12r01rBA      [24] 1224 	lcall	_imprimeInst4bits
                     0214  1225 	C$lcd.h$167$1$42 ==.
                           1226 ;	lcd.h:167: return;
                     0214  1227 	C$lcd.h$168$1$42 ==.
                     0214  1228 	XG$posicionaCursor4bits$0$0 ==.
   0214 22            [24] 1229 	ret
                           1230 ;------------------------------------------------------------
                           1231 ;Allocation info for local variables in function 'estourot1'
                           1232 ;------------------------------------------------------------
                     0215  1233 	G$estourot1$0$0 ==.
                     0215  1234 	C$frequencimetro_simples.c$17$1$42 ==.
                           1235 ;	frequencimetro_simples.c:17: void estourot1(void)__interrupt(3){ //overflow Timer1
                           1236 ;	-----------------------------------------
                           1237 ;	 function estourot1
                           1238 ;	-----------------------------------------
   0215                    1239 _estourot1:
                     0215  1240 	C$frequencimetro_simples.c$18$1$48 ==.
                           1241 ;	frequencimetro_simples.c:18: estouros++;//estouros de TH1
   0215 05*03         [12] 1242 	inc	_estouros
                     0217  1243 	C$frequencimetro_simples.c$19$1$48 ==.
                           1244 ;	frequencimetro_simples.c:19: TF1=0;
   0217 C2 8F         [12] 1245 	clr	_TF1
                     0219  1246 	C$frequencimetro_simples.c$20$1$48 ==.
                     0219  1247 	XG$estourot1$0$0 ==.
   0219 32            [24] 1248 	reti
                           1249 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           1250 ;	eliminated unneeded push/pop psw
                           1251 ;	eliminated unneeded push/pop dpl
                           1252 ;	eliminated unneeded push/pop dph
                           1253 ;	eliminated unneeded push/pop b
                           1254 ;	eliminated unneeded push/pop acc
                           1255 ;------------------------------------------------------------
                           1256 ;Allocation info for local variables in function 'main'
                           1257 ;------------------------------------------------------------
                           1258 ;tempo                     Allocated to registers r6 
                           1259 ;i                         Allocated to registers r7 
                           1260 ;freq                      Allocated to registers r3 r6 
                           1261 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                           1262 ;------------------------------------------------------------
                     021A  1263 	G$main$0$0 ==.
                     021A  1264 	C$frequencimetro_simples.c$22$1$48 ==.
                           1265 ;	frequencimetro_simples.c:22: void main(void){
                           1266 ;	-----------------------------------------
                           1267 ;	 function main
                           1268 ;	-----------------------------------------
   021A                    1269 _main:
                     021A  1270 	C$frequencimetro_simples.c$27$1$50 ==.
                           1271 ;	frequencimetro_simples.c:27: TMOD=0x51; //timer1 como contador 16bits, timer0 como timer 16bits
   021A 75 89 51      [24] 1272 	mov	_TMOD,#0x51
                     021D  1273 	C$frequencimetro_simples.c$28$1$50 ==.
                           1274 ;	frequencimetro_simples.c:28: EA = 1;
   021D D2 AF         [12] 1275 	setb	_EA
                     021F  1276 	C$frequencimetro_simples.c$29$1$50 ==.
                           1277 ;	frequencimetro_simples.c:29: initLCD4bits();
   021F 12r01rE4      [24] 1278 	lcall	_initLCD4bits
                     0222  1279 	C$frequencimetro_simples.c$31$1$50 ==.
                           1280 ;	frequencimetro_simples.c:31: while(1){
   0222                    1281 00110$:
                     0222  1282 	C$frequencimetro_simples.c$32$2$51 ==.
                           1283 ;	frequencimetro_simples.c:32: apagaLCD4bits;
   0222 75 82 01      [24] 1284 	mov	dpl,#0x01
   0225 12r01rBA      [24] 1285 	lcall	_imprimeInst4bits
                     0228  1286 	C$frequencimetro_simples.c$33$2$51 ==.
                           1287 ;	frequencimetro_simples.c:33: for(i=0; i<6; i++)
   0228 7F 00         [12] 1288 	mov	r7,#0x00
   022A                    1289 00112$:
                     022A  1290 	C$frequencimetro_simples.c$34$2$51 ==.
                           1291 ;	frequencimetro_simples.c:34: ascii[i]=48; //reinicia vetor da frequencia em ascii
   022A EF            [12] 1292 	mov	a,r7
   022B 24r04         [12] 1293 	add	a,#_ascii
   022D F8            [12] 1294 	mov	r0,a
   022E 76 30         [12] 1295 	mov	@r0,#0x30
                     0230  1296 	C$frequencimetro_simples.c$33$2$51 ==.
                           1297 ;	frequencimetro_simples.c:33: for(i=0; i<6; i++)
   0230 0F            [12] 1298 	inc	r7
   0231 C3            [12] 1299 	clr	c
   0232 EF            [12] 1300 	mov	a,r7
   0233 64 80         [12] 1301 	xrl	a,#0x80
   0235 94 86         [12] 1302 	subb	a,#0x86
   0237 40 F1         [24] 1303 	jc	00112$
                     0239  1304 	C$frequencimetro_simples.c$35$2$51 ==.
                           1305 ;	frequencimetro_simples.c:35: estouros=0;
   0239 75*03 00      [24] 1306 	mov	_estouros,#0x00
                     023C  1307 	C$frequencimetro_simples.c$37$2$51 ==.
                           1308 ;	frequencimetro_simples.c:37: tempo=20; //scaler pro timer que conta 1s (255 *(255-59)*20)
   023C 7E 14         [12] 1309 	mov	r6,#0x14
                     023E  1310 	C$frequencimetro_simples.c$38$2$51 ==.
                           1311 ;	frequencimetro_simples.c:38: TH1=0;
   023E 75 8D 00      [24] 1312 	mov	_TH1,#0x00
                     0241  1313 	C$frequencimetro_simples.c$39$2$51 ==.
                           1314 ;	frequencimetro_simples.c:39: TL1=0;
   0241 75 8B 00      [24] 1315 	mov	_TL1,#0x00
                     0244  1316 	C$frequencimetro_simples.c$40$2$51 ==.
                           1317 ;	frequencimetro_simples.c:40: TR1=1;//começa contagem pulsos
   0244 D2 8E         [12] 1318 	setb	_TR1
                     0246  1319 	C$frequencimetro_simples.c$41$2$51 ==.
                           1320 ;	frequencimetro_simples.c:41: TH0=59;//janela de 1 segundo
   0246 75 8C 3B      [24] 1321 	mov	_TH0,#0x3B
                     0249  1322 	C$frequencimetro_simples.c$42$2$51 ==.
                           1323 ;	frequencimetro_simples.c:42: TR0=1;//começa contagem tempo
   0249 D2 8C         [12] 1324 	setb	_TR0
                     024B  1325 	C$frequencimetro_simples.c$46$2$51 ==.
                           1326 ;	frequencimetro_simples.c:46: while(tempo>0){
   024B                    1327 00105$:
   024B EE            [12] 1328 	mov	a,r6
   024C 60 08         [24] 1329 	jz	00107$
                     024E  1330 	C$frequencimetro_simples.c$47$3$52 ==.
                           1331 ;	frequencimetro_simples.c:47: while(!TF0);
   024E                    1332 00102$:
                     024E  1333 	C$frequencimetro_simples.c$48$3$52 ==.
                           1334 ;	frequencimetro_simples.c:48: TF0=0;
   024E 10 8D 02      [24] 1335 	jbc	_TF0,00145$
   0251 80 FB         [24] 1336 	sjmp	00102$
   0253                    1337 00145$:
                     0253  1338 	C$frequencimetro_simples.c$49$3$52 ==.
                           1339 ;	frequencimetro_simples.c:49: tempo--;
   0253 1E            [12] 1340 	dec	r6
   0254 80 F5         [24] 1341 	sjmp	00105$
   0256                    1342 00107$:
                     0256  1343 	C$frequencimetro_simples.c$51$2$51 ==.
                           1344 ;	frequencimetro_simples.c:51: TR1=0; //para contagens
   0256 C2 8E         [12] 1345 	clr	_TR1
                     0258  1346 	C$frequencimetro_simples.c$52$2$51 ==.
                           1347 ;	frequencimetro_simples.c:52: TR0=0;
   0258 C2 8C         [12] 1348 	clr	_TR0
                     025A  1349 	C$frequencimetro_simples.c$55$2$51 ==.
                           1350 ;	frequencimetro_simples.c:55: freq=65535*estouros+256*TH1+TL1;
   025A 85*03*00      [24] 1351 	mov	__mullong_PARM_2,_estouros
   025D 75*01 00      [24] 1352 	mov	(__mullong_PARM_2 + 1),#0x00
   0260 75*02 00      [24] 1353 	mov	(__mullong_PARM_2 + 2),#0x00
   0263 75*03 00      [24] 1354 	mov	(__mullong_PARM_2 + 3),#0x00
   0266 90 FF FF      [24] 1355 	mov	dptr,#0xFFFF
   0269 E4            [12] 1356 	clr	a
   026A F5 F0         [12] 1357 	mov	b,a
   026C 12r00r00      [24] 1358 	lcall	__mullong
   026F 85 82*0A      [24] 1359 	mov	_main_sloc0_1_0,dpl
   0272 85 83*0B      [24] 1360 	mov	(_main_sloc0_1_0 + 1),dph
   0275 85 F0*0C      [24] 1361 	mov	(_main_sloc0_1_0 + 2),b
   0278 F5*0D         [12] 1362 	mov	(_main_sloc0_1_0 + 3),a
   027A AE 8D         [24] 1363 	mov	r6,_TH1
   027C 7A 00         [12] 1364 	mov	r2,#0x00
   027E EE            [12] 1365 	mov	a,r6
   027F 33            [12] 1366 	rlc	a
   0280 95 E0         [12] 1367 	subb	a,acc
   0282 FD            [12] 1368 	mov	r5,a
   0283 FC            [12] 1369 	mov	r4,a
   0284 EA            [12] 1370 	mov	a,r2
   0285 25*0A         [12] 1371 	add	a,_main_sloc0_1_0
   0287 F5*0A         [12] 1372 	mov	_main_sloc0_1_0,a
   0289 EE            [12] 1373 	mov	a,r6
   028A 35*0B         [12] 1374 	addc	a,(_main_sloc0_1_0 + 1)
   028C F5*0B         [12] 1375 	mov	(_main_sloc0_1_0 + 1),a
   028E ED            [12] 1376 	mov	a,r5
   028F 35*0C         [12] 1377 	addc	a,(_main_sloc0_1_0 + 2)
   0291 F5*0C         [12] 1378 	mov	(_main_sloc0_1_0 + 2),a
   0293 EC            [12] 1379 	mov	a,r4
   0294 35*0D         [12] 1380 	addc	a,(_main_sloc0_1_0 + 3)
   0296 F5*0D         [12] 1381 	mov	(_main_sloc0_1_0 + 3),a
   0298 AB 8B         [24] 1382 	mov	r3,_TL1
   029A E4            [12] 1383 	clr	a
   029B FE            [12] 1384 	mov	r6,a
   029C 33            [12] 1385 	rlc	a
   029D 95 E0         [12] 1386 	subb	a,acc
   029F FD            [12] 1387 	mov	r5,a
   02A0 FC            [12] 1388 	mov	r4,a
   02A1 EB            [12] 1389 	mov	a,r3
   02A2 25*0A         [12] 1390 	add	a,_main_sloc0_1_0
   02A4 FB            [12] 1391 	mov	r3,a
   02A5 EE            [12] 1392 	mov	a,r6
   02A6 35*0B         [12] 1393 	addc	a,(_main_sloc0_1_0 + 1)
   02A8 FE            [12] 1394 	mov	r6,a
   02A9 ED            [12] 1395 	mov	a,r5
   02AA 35*0C         [12] 1396 	addc	a,(_main_sloc0_1_0 + 2)
   02AC EC            [12] 1397 	mov	a,r4
   02AD 35*0D         [12] 1398 	addc	a,(_main_sloc0_1_0 + 3)
                     02AF  1399 	C$frequencimetro_simples.c$58$2$51 ==.
                           1400 ;	frequencimetro_simples.c:58: imprimeFrase4bits("f: ");
   02AF 90r00r00      [24] 1401 	mov	dptr,#__str_0
   02B2 75 F0 80      [24] 1402 	mov	b,#0x80
   02B5 C0 06         [24] 1403 	push	ar6
   02B7 C0 03         [24] 1404 	push	ar3
   02B9 12r01r2F      [24] 1405 	lcall	_imprimeFrase4bits
   02BC D0 03         [24] 1406 	pop	ar3
   02BE D0 06         [24] 1407 	pop	ar6
                     02C0  1408 	C$frequencimetro_simples.c$59$2$51 ==.
                           1409 ;	frequencimetro_simples.c:59: asciiNum(freq);
   02C0 7D 00         [12] 1410 	mov	r5,#0x00
   02C2 7C 00         [12] 1411 	mov	r4,#0x00
   02C4 8B 82         [24] 1412 	mov	dpl,r3
   02C6 8E 83         [24] 1413 	mov	dph,r6
   02C8 8D F0         [24] 1414 	mov	b,r5
   02CA EC            [12] 1415 	mov	a,r4
   02CB 12r03r43      [24] 1416 	lcall	_asciiNum
                     02CE  1417 	C$frequencimetro_simples.c$60$2$51 ==.
                           1418 ;	frequencimetro_simples.c:60: for(i=ndigitos; i>=0; i--)
   02CE AF*02         [24] 1419 	mov	r7,_ndigitos
   02D0                    1420 00115$:
   02D0 EF            [12] 1421 	mov	a,r7
   02D1 30 E7 03      [24] 1422 	jnb	acc.7,00146$
   02D4 02r02r22      [24] 1423 	ljmp	00110$
   02D7                    1424 00146$:
                     02D7  1425 	C$frequencimetro_simples.c$61$2$51 ==.
                           1426 ;	frequencimetro_simples.c:61: imprimeChar4bits(ascii[i]);
   02D7 EF            [12] 1427 	mov	a,r7
   02D8 24r04         [12] 1428 	add	a,#_ascii
   02DA F9            [12] 1429 	mov	r1,a
   02DB 87 82         [24] 1430 	mov	dpl,@r1
   02DD C0 07         [24] 1431 	push	ar7
   02DF 12r01r01      [24] 1432 	lcall	_imprimeChar4bits
   02E2 D0 07         [24] 1433 	pop	ar7
                     02E4  1434 	C$frequencimetro_simples.c$60$2$51 ==.
                           1435 ;	frequencimetro_simples.c:60: for(i=ndigitos; i>=0; i--)
   02E4 1F            [12] 1436 	dec	r7
   02E5 80 E9         [24] 1437 	sjmp	00115$
                     02E7  1438 	C$frequencimetro_simples.c$63$1$50 ==.
                     02E7  1439 	XG$main$0$0 ==.
   02E7 22            [24] 1440 	ret
                           1441 ;------------------------------------------------------------
                           1442 ;Allocation info for local variables in function 'pow'
                           1443 ;------------------------------------------------------------
                           1444 ;pot                       Allocated with name '_pow_PARM_2'
                           1445 ;base                      Allocated to registers r4 r5 r6 r7 
                           1446 ;i                         Allocated to registers r3 
                           1447 ;resp                      Allocated with name '_pow_resp_1_54'
                           1448 ;------------------------------------------------------------
                     02E8  1449 	G$pow$0$0 ==.
                     02E8  1450 	C$frequencimetro_simples.c$65$1$50 ==.
                           1451 ;	frequencimetro_simples.c:65: long int pow(long int base, unsigned char pot){
                           1452 ;	-----------------------------------------
                           1453 ;	 function pow
                           1454 ;	-----------------------------------------
   02E8                    1455 _pow:
   02E8 AC 82         [24] 1456 	mov	r4,dpl
   02EA AD 83         [24] 1457 	mov	r5,dph
   02EC AE F0         [24] 1458 	mov	r6,b
   02EE FF            [12] 1459 	mov	r7,a
                     02EF  1460 	C$frequencimetro_simples.c$67$1$50 ==.
                           1461 ;	frequencimetro_simples.c:67: long int resp=base;
   02EF 8C*0F         [24] 1462 	mov	_pow_resp_1_54,r4
   02F1 8D*10         [24] 1463 	mov	(_pow_resp_1_54 + 1),r5
   02F3 8E*11         [24] 1464 	mov	(_pow_resp_1_54 + 2),r6
   02F5 8F*12         [24] 1465 	mov	(_pow_resp_1_54 + 3),r7
                     02F7  1466 	C$frequencimetro_simples.c$69$1$54 ==.
                           1467 ;	frequencimetro_simples.c:69: for(i=1; i<pot; i++){
   02F7 7B 01         [12] 1468 	mov	r3,#0x01
   02F9                    1469 00103$:
   02F9 C3            [12] 1470 	clr	c
   02FA EB            [12] 1471 	mov	a,r3
   02FB 95*0E         [12] 1472 	subb	a,_pow_PARM_2
   02FD 50 38         [24] 1473 	jnc	00101$
                     02FF  1474 	C$frequencimetro_simples.c$70$1$54 ==.
                           1475 ;	frequencimetro_simples.c:70: resp*=base;
   02FF 8C*00         [24] 1476 	mov	__mullong_PARM_2,r4
   0301 8D*01         [24] 1477 	mov	(__mullong_PARM_2 + 1),r5
   0303 8E*02         [24] 1478 	mov	(__mullong_PARM_2 + 2),r6
   0305 8F*03         [24] 1479 	mov	(__mullong_PARM_2 + 3),r7
   0307 85*0F 82      [24] 1480 	mov	dpl,_pow_resp_1_54
   030A 85*10 83      [24] 1481 	mov	dph,(_pow_resp_1_54 + 1)
   030D 85*11 F0      [24] 1482 	mov	b,(_pow_resp_1_54 + 2)
   0310 E5*12         [12] 1483 	mov	a,(_pow_resp_1_54 + 3)
   0312 C0 07         [24] 1484 	push	ar7
   0314 C0 06         [24] 1485 	push	ar6
   0316 C0 05         [24] 1486 	push	ar5
   0318 C0 04         [24] 1487 	push	ar4
   031A C0 03         [24] 1488 	push	ar3
   031C 12r00r00      [24] 1489 	lcall	__mullong
   031F 85 82*0F      [24] 1490 	mov	_pow_resp_1_54,dpl
   0322 85 83*10      [24] 1491 	mov	(_pow_resp_1_54 + 1),dph
   0325 85 F0*11      [24] 1492 	mov	(_pow_resp_1_54 + 2),b
   0328 F5*12         [12] 1493 	mov	(_pow_resp_1_54 + 3),a
   032A D0 03         [24] 1494 	pop	ar3
   032C D0 04         [24] 1495 	pop	ar4
   032E D0 05         [24] 1496 	pop	ar5
   0330 D0 06         [24] 1497 	pop	ar6
   0332 D0 07         [24] 1498 	pop	ar7
                     0334  1499 	C$frequencimetro_simples.c$69$1$54 ==.
                           1500 ;	frequencimetro_simples.c:69: for(i=1; i<pot; i++){
   0334 0B            [12] 1501 	inc	r3
   0335 80 C2         [24] 1502 	sjmp	00103$
   0337                    1503 00101$:
                     0337  1504 	C$frequencimetro_simples.c$72$1$54 ==.
                           1505 ;	frequencimetro_simples.c:72: return(resp);
   0337 85*0F 82      [24] 1506 	mov	dpl,_pow_resp_1_54
   033A 85*10 83      [24] 1507 	mov	dph,(_pow_resp_1_54 + 1)
   033D 85*11 F0      [24] 1508 	mov	b,(_pow_resp_1_54 + 2)
   0340 E5*12         [12] 1509 	mov	a,(_pow_resp_1_54 + 3)
                     0342  1510 	C$frequencimetro_simples.c$73$1$54 ==.
                     0342  1511 	XG$pow$0$0 ==.
   0342 22            [24] 1512 	ret
                           1513 ;------------------------------------------------------------
                           1514 ;Allocation info for local variables in function 'asciiNum'
                           1515 ;------------------------------------------------------------
                           1516 ;num                       Allocated with name '_asciiNum_num_1_56'
                           1517 ;i                         Allocated to registers r3 
                           1518 ;a                         Allocated with name '_asciiNum_a_1_57'
                           1519 ;------------------------------------------------------------
                     0343  1520 	G$asciiNum$0$0 ==.
                     0343  1521 	C$frequencimetro_simples.c$75$1$54 ==.
                           1522 ;	frequencimetro_simples.c:75: void asciiNum (long int num){//Imprime número decimal (ASCII), ord=ordem da base 10
                           1523 ;	-----------------------------------------
                           1524 ;	 function asciiNum
                           1525 ;	-----------------------------------------
   0343                    1526 _asciiNum:
   0343 85 82*13      [24] 1527 	mov	_asciiNum_num_1_56,dpl
   0346 85 83*14      [24] 1528 	mov	(_asciiNum_num_1_56 + 1),dph
   0349 85 F0*15      [24] 1529 	mov	(_asciiNum_num_1_56 + 2),b
   034C F5*16         [12] 1530 	mov	(_asciiNum_num_1_56 + 3),a
                     034E  1531 	C$frequencimetro_simples.c$76$1$54 ==.
                           1532 ;	frequencimetro_simples.c:76: char i=5;
   034E 7B 05         [12] 1533 	mov	r3,#0x05
                     0350  1534 	C$frequencimetro_simples.c$79$1$57 ==.
                           1535 ;	frequencimetro_simples.c:79: ndigitos=0;
   0350 75*02 00      [24] 1536 	mov	_ndigitos,#0x00
                     0353  1537 	C$frequencimetro_simples.c$80$3$59 ==.
                           1538 ;	frequencimetro_simples.c:80: while(i>0){
   0353                    1539 00105$:
   0353 C3            [12] 1540 	clr	c
   0354 E4            [12] 1541 	clr	a
   0355 64 80         [12] 1542 	xrl	a,#0x80
   0357 8B F0         [24] 1543 	mov	b,r3
   0359 63 F0 80      [24] 1544 	xrl	b,#0x80
   035C 95 F0         [12] 1545 	subb	a,b
   035E 40 03         [24] 1546 	jc	00122$
   0360 02r03rEC      [24] 1547 	ljmp	00107$
   0363                    1548 00122$:
                     0363  1549 	C$frequencimetro_simples.c$81$2$58 ==.
                           1550 ;	frequencimetro_simples.c:81: a=pow(10,i);
   0363 8B*0E         [24] 1551 	mov	_pow_PARM_2,r3
   0365 90 00 0A      [24] 1552 	mov	dptr,#(0x0A&0x00ff)
   0368 E4            [12] 1553 	clr	a
   0369 F5 F0         [12] 1554 	mov	b,a
   036B C0 03         [24] 1555 	push	ar3
   036D 12r02rE8      [24] 1556 	lcall	_pow
   0370 85 82*17      [24] 1557 	mov	_asciiNum_a_1_57,dpl
   0373 85 83*18      [24] 1558 	mov	(_asciiNum_a_1_57 + 1),dph
   0376 85 F0*19      [24] 1559 	mov	(_asciiNum_a_1_57 + 2),b
   0379 F5*1A         [12] 1560 	mov	(_asciiNum_a_1_57 + 3),a
                     037B  1561 	C$frequencimetro_simples.c$82$1$57 ==.
                           1562 ;	frequencimetro_simples.c:82: if(num/a>0){
   037B 85*17*00      [24] 1563 	mov	__divslong_PARM_2,_asciiNum_a_1_57
   037E 85*18*01      [24] 1564 	mov	(__divslong_PARM_2 + 1),(_asciiNum_a_1_57 + 1)
   0381 85*19*02      [24] 1565 	mov	(__divslong_PARM_2 + 2),(_asciiNum_a_1_57 + 2)
   0384 85*1A*03      [24] 1566 	mov	(__divslong_PARM_2 + 3),(_asciiNum_a_1_57 + 3)
   0387 85*13 82      [24] 1567 	mov	dpl,_asciiNum_num_1_56
   038A 85*14 83      [24] 1568 	mov	dph,(_asciiNum_num_1_56 + 1)
   038D 85*15 F0      [24] 1569 	mov	b,(_asciiNum_num_1_56 + 2)
   0390 E5*16         [12] 1570 	mov	a,(_asciiNum_num_1_56 + 3)
   0392 12r00r00      [24] 1571 	lcall	__divslong
   0395 AA 82         [24] 1572 	mov	r2,dpl
   0397 AD 83         [24] 1573 	mov	r5,dph
   0399 AE F0         [24] 1574 	mov	r6,b
   039B FF            [12] 1575 	mov	r7,a
   039C D0 03         [24] 1576 	pop	ar3
   039E C3            [12] 1577 	clr	c
   039F E4            [12] 1578 	clr	a
   03A0 9A            [12] 1579 	subb	a,r2
   03A1 E4            [12] 1580 	clr	a
   03A2 9D            [12] 1581 	subb	a,r5
   03A3 E4            [12] 1582 	clr	a
   03A4 9E            [12] 1583 	subb	a,r6
   03A5 E4            [12] 1584 	clr	a
   03A6 64 80         [12] 1585 	xrl	a,#0x80
   03A8 8F F0         [24] 1586 	mov	b,r7
   03AA 63 F0 80      [24] 1587 	xrl	b,#0x80
   03AD 95 F0         [12] 1588 	subb	a,b
   03AF 50 37         [24] 1589 	jnc	00104$
                     03B1  1590 	C$frequencimetro_simples.c$83$3$59 ==.
                           1591 ;	frequencimetro_simples.c:83: ascii[i]=num/a+48; //ascii do digito
   03B1 EB            [12] 1592 	mov	a,r3
   03B2 24r04         [12] 1593 	add	a,#_ascii
   03B4 F9            [12] 1594 	mov	r1,a
   03B5 74 30         [12] 1595 	mov	a,#0x30
   03B7 2A            [12] 1596 	add	a,r2
   03B8 F7            [12] 1597 	mov	@r1,a
                     03B9  1598 	C$frequencimetro_simples.c$84$3$59 ==.
                           1599 ;	frequencimetro_simples.c:84: if(ndigitos==0) //se ndigitos ainda não foi alterado
   03B9 E5*02         [12] 1600 	mov	a,_ndigitos
   03BB 70 02         [24] 1601 	jnz	00102$
                     03BD  1602 	C$frequencimetro_simples.c$85$3$59 ==.
                           1603 ;	frequencimetro_simples.c:85: ndigitos=i;
   03BD 8B*02         [24] 1604 	mov	_ndigitos,r3
   03BF                    1605 00102$:
                     03BF  1606 	C$frequencimetro_simples.c$87$1$57 ==.
                           1607 ;	frequencimetro_simples.c:87: num=num%a;
   03BF 85*17*00      [24] 1608 	mov	__modslong_PARM_2,_asciiNum_a_1_57
   03C2 85*18*01      [24] 1609 	mov	(__modslong_PARM_2 + 1),(_asciiNum_a_1_57 + 1)
   03C5 85*19*02      [24] 1610 	mov	(__modslong_PARM_2 + 2),(_asciiNum_a_1_57 + 2)
   03C8 85*1A*03      [24] 1611 	mov	(__modslong_PARM_2 + 3),(_asciiNum_a_1_57 + 3)
   03CB 85*13 82      [24] 1612 	mov	dpl,_asciiNum_num_1_56
   03CE 85*14 83      [24] 1613 	mov	dph,(_asciiNum_num_1_56 + 1)
   03D1 85*15 F0      [24] 1614 	mov	b,(_asciiNum_num_1_56 + 2)
   03D4 E5*16         [12] 1615 	mov	a,(_asciiNum_num_1_56 + 3)
   03D6 C0 03         [24] 1616 	push	ar3
   03D8 12r00r00      [24] 1617 	lcall	__modslong
   03DB 85 82*13      [24] 1618 	mov	_asciiNum_num_1_56,dpl
   03DE 85 83*14      [24] 1619 	mov	(_asciiNum_num_1_56 + 1),dph
   03E1 85 F0*15      [24] 1620 	mov	(_asciiNum_num_1_56 + 2),b
   03E4 F5*16         [12] 1621 	mov	(_asciiNum_num_1_56 + 3),a
   03E6 D0 03         [24] 1622 	pop	ar3
   03E8                    1623 00104$:
                     03E8  1624 	C$frequencimetro_simples.c$89$2$58 ==.
                           1625 ;	frequencimetro_simples.c:89: i--;
   03E8 1B            [12] 1626 	dec	r3
   03E9 02r03r53      [24] 1627 	ljmp	00105$
   03EC                    1628 00107$:
                     03EC  1629 	C$frequencimetro_simples.c$91$1$57 ==.
                           1630 ;	frequencimetro_simples.c:91: ascii[0]=(num%10)+48;//ASCII da unidade
   03EC 75*00 0A      [24] 1631 	mov	__modslong_PARM_2,#0x0A
   03EF E4            [12] 1632 	clr	a
   03F0 F5*01         [12] 1633 	mov	(__modslong_PARM_2 + 1),a
   03F2 F5*02         [12] 1634 	mov	(__modslong_PARM_2 + 2),a
   03F4 F5*03         [12] 1635 	mov	(__modslong_PARM_2 + 3),a
   03F6 85*13 82      [24] 1636 	mov	dpl,_asciiNum_num_1_56
   03F9 85*14 83      [24] 1637 	mov	dph,(_asciiNum_num_1_56 + 1)
   03FC 85*15 F0      [24] 1638 	mov	b,(_asciiNum_num_1_56 + 2)
   03FF E5*16         [12] 1639 	mov	a,(_asciiNum_num_1_56 + 3)
   0401 12r00r00      [24] 1640 	lcall	__modslong
   0404 AC 82         [24] 1641 	mov	r4,dpl
   0406 74 30         [12] 1642 	mov	a,#0x30
   0408 2C            [12] 1643 	add	a,r4
   0409 F5*04         [12] 1644 	mov	_ascii,a
                     040B  1645 	C$frequencimetro_simples.c$92$1$57 ==.
                     040B  1646 	XG$asciiNum$0$0 ==.
   040B 22            [24] 1647 	ret
                           1648 	.area CSEG    (CODE)
                           1649 	.area CONST   (CODE)
                     0000  1650 Ffrequencimetro_simples$_str_0$0$0 == .
   0000                    1651 __str_0:
   0000 66 3A 20           1652 	.ascii "f: "
   0003 00                 1653 	.db 0x00
                           1654 	.area XINIT   (CODE)
                           1655 	.area CABS    (ABS,CODE)
